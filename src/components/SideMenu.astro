---
interface Props {
	currentTool?: string;
}

const { currentTool = 'password-generator' } = Astro.props;

const tools = [
	{
		id: 'password-generator',
		name: 'Password Generator',
		icon: 'üîê',
		description: 'Generate secure passwords'
	},
	{
		id: 'hexdump',
		name: 'Hex Dump',
		icon: 'üìä',
		description: 'Binary file analysis'
	}
];
---

<nav class="side-menu">
	<div class="menu-header">
		<h2 class="menu-title">
			<span class="menu-icon">‚ö°</span>
			Web Toolbox
		</h2>
		<button class="menu-toggle" id="menu-toggle">
			<span class="hamburger"></span>
		</button>
	</div>

	<div class="menu-content" id="menu-content">
		<div class="menu-section">
			<h3 class="section-title">Tools</h3>
			<ul class="tool-list">
				{tools.map(tool => (
					<li class="tool-item">
						<button 
							class={`tool-button ${tool.id === currentTool ? 'active' : ''}`}
							data-tool={tool.id}
						>
							<span class="tool-icon">{tool.icon}</span>
							<div class="tool-info">
								<span class="tool-name">{tool.name}</span>
								<span class="tool-description">{tool.description}</span>
							</div>
						</button>
					</li>
				))}
			</ul>
		</div>

		<div class="menu-footer">
			<div class="footer-info">
				<p>Secure tools for developers</p>
				<p class="version">v1.0.0</p>
			</div>
		</div>
	</div>
</nav>

<script>
	const menuToggle = document.getElementById('menu-toggle');
	const menuContent = document.getElementById('menu-content');
	const toolButtons = document.querySelectorAll('.tool-button');

	// Mobile menu toggle
	menuToggle?.addEventListener('click', () => {
		menuContent?.classList.toggle('show');
		menuToggle.classList.toggle('active');
	});

	// Tool switching
	toolButtons.forEach(button => {
		button.addEventListener('click', () => {
			const toolId = button.getAttribute('data-tool');
			
			// Remove active class from all buttons
			toolButtons.forEach(btn => btn.classList.remove('active'));
			
			// Add active class to clicked button
			button.classList.add('active');
			
			// Dispatch custom event for tool switching
			window.dispatchEvent(new CustomEvent('toolSwitch', { 
				detail: { toolId } 
			}));
			
			// Close mobile menu
			menuContent?.classList.remove('show');
			menuToggle?.classList.remove('active');
		});
	});

	// Close menu when clicking outside
	document.addEventListener('click', (e) => {
		if (!e.target.closest('.side-menu') && menuContent?.classList.contains('show')) {
			menuContent.classList.remove('show');
			menuToggle?.classList.remove('active');
		}
	});
</script>

<style>
	.side-menu {
		position: fixed;
		top: 0;
		left: 0;
		width: 280px;
		height: 100vh;
		background: var(--bg-glass);
		backdrop-filter: blur(20px);
		border-right: 1px solid var(--border-primary);
		display: flex;
		flex-direction: column;
		z-index: 1000;
		transition: transform 0.3s ease;
	}

	.menu-header {
		padding: 1.5rem;
		border-bottom: 1px solid var(--border-secondary);
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.menu-title {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		font-size: 1.25rem;
		font-weight: 700;
		color: var(--text-primary);
		margin: 0;
	}

	.menu-icon {
		font-size: 1.5rem;
		background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}

	.menu-toggle {
		display: none;
		background: none;
		border: none;
		cursor: pointer;
		padding: 0.5rem;
		border-radius: var(--radius-sm);
		transition: background-color 0.2s ease;
	}

	.menu-toggle:hover {
		background: var(--bg-tertiary);
	}

	.hamburger {
		width: 20px;
		height: 2px;
		background: var(--text-primary);
		display: block;
		position: relative;
		transition: all 0.3s ease;
	}

	.hamburger::before,
	.hamburger::after {
		content: '';
		position: absolute;
		width: 100%;
		height: 2px;
		background: var(--text-primary);
		transition: all 0.3s ease;
	}

	.hamburger::before {
		top: -6px;
	}

	.hamburger::after {
		top: 6px;
	}

	.menu-toggle.active .hamburger {
		background: transparent;
	}

	.menu-toggle.active .hamburger::before {
		transform: rotate(45deg);
		top: 0;
	}

	.menu-toggle.active .hamburger::after {
		transform: rotate(-45deg);
		top: 0;
	}

	.menu-content {
		flex: 1;
		padding: 1.5rem;
		display: flex;
		flex-direction: column;
		gap: 2rem;
		overflow-y: auto;
	}

	.menu-section {
		flex: 1;
	}

	.section-title {
		font-size: 0.875rem;
		font-weight: 600;
		color: var(--text-muted);
		text-transform: uppercase;
		letter-spacing: 0.05em;
		margin-bottom: 1rem;
	}

	.tool-list {
		list-style: none;
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.tool-item {
		width: 100%;
	}

	.tool-button {
		width: 100%;
		padding: 1rem;
		background: transparent;
		border: 1px solid var(--border-secondary);
		border-radius: var(--radius-md);
		cursor: pointer;
		transition: all 0.2s ease;
		display: flex;
		align-items: center;
		gap: 0.75rem;
		text-align: left;
		position: relative;
		overflow: hidden;
	}

	.tool-button::before {
		content: '';
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
		transition: left 0.5s ease;
	}

	.tool-button:hover::before {
		left: 100%;
	}

	.tool-button:hover {
		background: var(--bg-card);
		border-color: var(--border-accent);
		transform: translateX(4px);
	}

	.tool-button.active {
		background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
		border-color: var(--accent-primary);
		box-shadow: var(--shadow-glow);
	}

	.tool-button.active .tool-name {
		color: white;
	}

	.tool-button.active .tool-description {
		color: rgba(255, 255, 255, 0.8);
	}

	.tool-icon {
		font-size: 1.5rem;
		min-width: 1.5rem;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.tool-info {
		flex: 1;
		display: flex;
		flex-direction: column;
		gap: 0.25rem;
	}

	.tool-name {
		font-size: 0.875rem;
		font-weight: 500;
		color: var(--text-primary);
		transition: color 0.2s ease;
	}

	.tool-description {
		font-size: 0.75rem;
		color: var(--text-muted);
		transition: color 0.2s ease;
	}

	.menu-footer {
		border-top: 1px solid var(--border-secondary);
		padding-top: 1rem;
	}

	.footer-info {
		text-align: center;
	}

	.footer-info p {
		font-size: 0.75rem;
		color: var(--text-muted);
		margin: 0;
	}

	.version {
		opacity: 0.7;
		font-family: var(--font-mono);
	}

	/* Mobile Responsive */
	@media (max-width: 768px) {
		.side-menu {
			transform: translateX(-100%);
			width: 100%;
			max-width: 320px;
		}

		.menu-toggle {
			display: block;
		}

		.menu-content {
			transform: translateY(-20px);
			opacity: 0;
			transition: all 0.3s ease;
			pointer-events: none;
		}

		.menu-content.show {
			transform: translateY(0);
			opacity: 1;
			pointer-events: all;
		}

		.side-menu:has(.menu-content.show) {
			transform: translateX(0);
		}

		.tool-button:hover {
			transform: none;
		}
	}

	/* Desktop adjustments */
	@media (min-width: 769px) {
		.tool-button {
			animation: slideIn 0.3s ease-out;
		}

		.tool-button:nth-child(1) { animation-delay: 0.1s; }
		.tool-button:nth-child(2) { animation-delay: 0.2s; }
		.tool-button:nth-child(3) { animation-delay: 0.3s; }
		.tool-button:nth-child(4) { animation-delay: 0.4s; }
	}

	/* Scroll styling for menu content */
	.menu-content::-webkit-scrollbar {
		width: 4px;
	}

	.menu-content::-webkit-scrollbar-track {
		background: transparent;
	}

	.menu-content::-webkit-scrollbar-thumb {
		background: var(--border-primary);
		border-radius: var(--radius-sm);
	}
</style>