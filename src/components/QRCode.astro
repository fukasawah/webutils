---
export interface Props {
  text?: string;
  size?: number;
  id?: string;
  errorCorrectionLevel?: 'L' | 'M' | 'Q' | 'H';
}

const { text, size = 300, id, errorCorrectionLevel = 'M' } = Astro.props;
const canvasId = id || `qr-${Math.random().toString(36).slice(2)}`;
---

<canvas 
  id={canvasId} 
  width={size} 
  height={size}
  data-qr-text={text || ''}
  data-qr-error-level={errorCorrectionLevel}
  data-qr-size={size}
></canvas>

<script>
  import QRCode from 'qrcode';
  
  // TypeScript型定義
  declare global {
    interface Window {
      QRCodeManager: QRManager;
      QRCode: QRManager;
    }
  }
  
  // QRマネージャークラス
  class QRManager {
    private instances: Map<string, any>;
    
    constructor() {
      this.instances = new Map();
    }
    
    async init(canvas: HTMLCanvasElement) {
      const id = canvas.id;
      const text = canvas.dataset.qrText || '';
      const errorLevel = canvas.dataset.qrErrorLevel || 'M';
      const size = parseInt(canvas.dataset.qrSize || '300');
      
      this.instances.set(id, { canvas, text, errorLevel, size });
      
      console.log(`Initializing QR: ${id}`);
      
      if (text) {
        try {
          await QRCode.toCanvas(canvas, text, {
            errorCorrectionLevel: errorLevel as any,
            width: size,
            margin: 2,
            color: {
              dark: '#000000',
              light: '#ffffff'
            }
          });
        } catch (error) {
          console.error('QR Code rendering failed:', error);
          this.showError(canvas, 'QR generation failed');
        }
      } else {
        this.showPlaceholder(canvas);
      }
    }
    
    async update(id: string, text: string) {
      const instance = this.instances.get(id);
      if (!instance) return;
      
      // Get current values from canvas dataset (may have been updated)
      const canvas = instance.canvas;
      const currentSize = parseInt(canvas.dataset.qrSize || instance.size.toString());
      const currentErrorLevel = canvas.dataset.qrErrorLevel || instance.errorLevel;
      
      // Update instance values
      instance.size = currentSize;
      instance.errorLevel = currentErrorLevel;
      
      try {
        await QRCode.toCanvas(canvas, text, {
          errorCorrectionLevel: currentErrorLevel as any,
          width: currentSize,
          margin: 2,
          color: {
            dark: '#000000',
            light: '#ffffff'
          }
        });
        console.log(`QR Code updated (size: ${currentSize}, error: ${currentErrorLevel})`);
      } catch (error) {
        console.error('QR Code update failed:', error);
        this.showError(canvas, 'Update failed');
      }
    }
    
    showPlaceholder(canvas: HTMLCanvasElement) {
      const ctx = canvas.getContext('2d');
      if (!ctx) return;
      ctx.fillStyle = '#f5f5f5';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = '#999';
      ctx.font = '14px sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText('QR Code', canvas.width / 2, canvas.height / 2);
    }
    
    showError(canvas: HTMLCanvasElement, message: string) {
      const ctx = canvas.getContext('2d');
      if (!ctx) return;
      ctx.fillStyle = '#ffe6e6';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = '#cc0000';
      ctx.font = '12px sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText(message, canvas.width / 2, canvas.height / 2);
    }
    
    byId(id: string) {
      return {
        update: (text: string) => this.update(id, text)
      };
    }
  }
  
  // グローバル設定
  if (!window.QRCodeManager) {
    window.QRCodeManager = new QRManager();
    window.QRCode = window.QRCodeManager;
  }
  
  // 初期化関数
  function initializeQRCodes() {
    const canvases = document.querySelectorAll('canvas[data-qr-size]');
    console.log(`Found ${canvases.length} QR canvases`);
    
    canvases.forEach(canvas => {
      window.QRCodeManager.init(canvas as HTMLCanvasElement);
    });
  }
  
  // DOM準備完了で初期化
  document.addEventListener('DOMContentLoaded', initializeQRCodes);
</script>

<style>
canvas {
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  background: #fff;
  display: block;
}

canvas:empty {
  background: linear-gradient(45deg, #f0f0f0 25%, transparent 25%),
              linear-gradient(-45deg, #f0f0f0 25%, transparent 25%),
              linear-gradient(45deg, transparent 75%, #f0f0f0 75%),
              linear-gradient(-45deg, transparent 75%, #f0f0f0 75%);
  background-size: 20px 20px;
  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
}
</style>