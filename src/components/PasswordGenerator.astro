---
---

<div id="password-generator">
	<h1>Password Generator</h1>
	
	<div class="controls">
		<div class="control-group">
			<label for="length">Length:</label>
			<input type="number" id="length" min="8" max="128" value="16" />
		</div>
		
		<div class="control-group">
			<label for="count">Count:</label>
			<input type="number" id="count" min="1" max="20" value="5" />
		</div>
		
		<div class="character-options">
			<h3>Character Types:</h3>
			<label>
				<input type="checkbox" id="uppercase" checked />
				Uppercase (A-Z)
			</label>
			<label>
				<input type="checkbox" id="lowercase" checked />
				Lowercase (a-z)
			</label>
			<label>
				<input type="checkbox" id="numbers" checked />
				Numbers (0-9)
			</label>
			<label>
				<input type="checkbox" id="symbols" checked />
				Symbols (!@#$%^&*)
			</label>
		</div>
		
		<button id="generate-btn">Generate Passwords</button>
	</div>
	
	<div class="results">
		<div class="result-header">
			<h3>Generated Passwords:</h3>
			<button id="copy-btn" disabled>Copy All</button>
		</div>
		<textarea id="password-output" readonly placeholder="Click 'Generate Passwords' to create passwords..."></textarea>
	</div>
</div>

<script>
	const lengthInput = document.getElementById('length') as HTMLInputElement;
	const countInput = document.getElementById('count') as HTMLInputElement;
	const uppercaseCheck = document.getElementById('uppercase') as HTMLInputElement;
	const lowercaseCheck = document.getElementById('lowercase') as HTMLInputElement;
	const numbersCheck = document.getElementById('numbers') as HTMLInputElement;
	const symbolsCheck = document.getElementById('symbols') as HTMLInputElement;
	const generateBtn = document.getElementById('generate-btn') as HTMLButtonElement;
	const copyBtn = document.getElementById('copy-btn') as HTMLButtonElement;
	const passwordOutput = document.getElementById('password-output') as HTMLTextAreaElement;

	const UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	const LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';
	const NUMBERS = '0123456789';
	const SYMBOLS = '!@#$%^&*()_+-=[]{}|;:,.<>?';

	function generatePassword(charset: string, length: number): string {
		
		const array = new Uint32Array(length);
		crypto.getRandomValues(array);
		
		let password = '';
		for (let i = 0; i < length; i++) {
			password += charset[array[i] % charset.length];
		}
		
		return password;
	}

	function generatePasswords(): void {
		const length = parseInt(lengthInput.value);
		const count = parseInt(countInput.value);
		
		if (length < 8 || length > 128) {
			alert('Password length must be between 8 and 128 characters');
			return;
		}
		
		if (count < 1 || count > 20) {
			alert('Password count must be between 1 and 20');
			return;
		}
		
		let charset = '';
		
		if (uppercaseCheck.checked) charset += UPPERCASE;
		if (lowercaseCheck.checked) charset += LOWERCASE;
		if (numbersCheck.checked) charset += NUMBERS;
		if (symbolsCheck.checked) charset += SYMBOLS;
		
		if (charset === '') {
			alert('Please select at least one character type');
			return '';
		}
		
		const passwords: string[] = [];
		
		for (let i = 0; i < count; i++) {
			const password = generatePassword(charset, length);
			if (password) {
				passwords.push(password);
			}
		}
		
		if (passwords.length > 0) {
			passwordOutput.value = passwords.join('\n');
			copyBtn.disabled = false;
		}
	}

	function copyToClipboard(): void {
		if (passwordOutput.value) {
			navigator.clipboard.writeText(passwordOutput.value).then(() => {
				copyBtn.textContent = 'Copied!';
				setTimeout(() => {
					copyBtn.textContent = 'Copy All';
				}, 2000);
			}).catch(() => {
				alert('Failed to copy passwords');
			});
		}
	}

	generateBtn.addEventListener('click', generatePasswords);
	copyBtn.addEventListener('click', copyToClipboard);
	
	// Generate initial passwords
	generatePasswords();
</script>

<style>
	#password-generator {
		max-width: 800px;
		margin: 0 auto;
		padding: 20px;
		font-family: Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;
	}

	h1 {
		text-align: center;
		color: #111827;
		margin-bottom: 30px;
		font-size: 2.5rem;
		font-weight: 600;
	}

	.controls {
		background: rgba(255, 255, 255, 0.9);
		border-radius: 16px;
		padding: 24px;
		margin-bottom: 24px;
		border: 1px solid rgba(229, 231, 235, 0.8);
		backdrop-filter: blur(10px);
	}

	.control-group {
		margin-bottom: 16px;
	}

	.control-group label {
		display: block;
		margin-bottom: 8px;
		font-weight: 500;
		color: #374151;
	}

	.control-group input[type="number"] {
		width: 100px;
		padding: 8px 12px;
		border: 1px solid #d1d5db;
		border-radius: 8px;
		font-size: 16px;
	}

	.character-options {
		margin-bottom: 20px;
	}

	.character-options h3 {
		margin-bottom: 12px;
		color: #374151;
		font-size: 1.1rem;
	}

	.character-options label {
		display: flex;
		align-items: center;
		margin-bottom: 8px;
		cursor: pointer;
		color: #4b5563;
	}

	.character-options input[type="checkbox"] {
		margin-right: 8px;
		transform: scale(1.2);
	}

	#generate-btn {
		background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
		color: white;
		border: none;
		padding: 12px 24px;
		border-radius: 10px;
		font-size: 16px;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.2s;
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.12);
	}

	#generate-btn:hover {
		transform: translateY(-1px);
		box-shadow: 0 4px 12px rgba(50, 69, 255, 0.3);
	}

	.results {
		background: rgba(255, 255, 255, 0.9);
		border-radius: 16px;
		padding: 24px;
		border: 1px solid rgba(229, 231, 235, 0.8);
		backdrop-filter: blur(10px);
	}

	.result-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 16px;
	}

	.result-header h3 {
		margin: 0;
		color: #374151;
		font-size: 1.2rem;
	}

	#copy-btn {
		background: #10b981;
		color: white;
		border: none;
		padding: 8px 16px;
		border-radius: 8px;
		font-size: 14px;
		cursor: pointer;
		transition: all 0.2s;
	}

	#copy-btn:hover:not(:disabled) {
		background: #059669;
	}

	#copy-btn:disabled {
		background: #9ca3af;
		cursor: not-allowed;
	}

	#password-output {
		width: 100%;
		min-height: 200px;
		padding: 16px;
		border: 1px solid #d1d5db;
		border-radius: 8px;
		font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, monospace;
		font-size: 14px;
		line-height: 1.6;
		background: #f9fafb;
		resize: vertical;
		box-sizing: border-box;
	}

	#password-output::placeholder {
		color: #9ca3af;
		font-style: italic;
	}

	@media (max-width: 768px) {
		#password-generator {
			padding: 16px;
		}

		h1 {
			font-size: 2rem;
		}

		.controls, .results {
			padding: 16px;
		}

		.result-header {
			flex-direction: column;
			gap: 12px;
			align-items: stretch;
		}

		.control-group input[type="number"] {
			width: 80px;
		}
	}
</style>