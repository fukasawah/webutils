---
---

<div class="tool-container">
	<div class="tool-header">
		<h1>üîê Password Generator</h1>
		<p>Generate secure passwords with customizable options</p>
	</div>
	
	<div class="glass-card tool-controls">
		<div class="control-row">
			<div class="control-group">
				<label for="length">Password Length</label>
				<input type="number" id="length" class="input" min="8" max="128" value="16" />
			</div>
			
			<div class="control-group">
				<label for="count">Number of Passwords</label>
				<input type="number" id="count" class="input" min="1" max="20" value="5" />
			</div>
		</div>
		
		<div class="character-options">
			<h3>Character Types</h3>
			<div class="checkbox-grid">
				<label class="checkbox-group">
					<input type="checkbox" id="uppercase" class="checkbox" checked />
					<span>Uppercase (A-Z)</span>
				</label>
				<label class="checkbox-group">
					<input type="checkbox" id="lowercase" class="checkbox" checked />
					<span>Lowercase (a-z)</span>
				</label>
				<label class="checkbox-group">
					<input type="checkbox" id="numbers" class="checkbox" checked />
					<span>Numbers (0-9)</span>
				</label>
				<label class="checkbox-group">
					<input type="checkbox" id="symbols" class="checkbox" checked />
					<span>Symbols (!@#$%^&*)</span>
				</label>
			</div>
		</div>
		
		<button id="generate-btn" class="btn btn-primary">
			<span>Generate Passwords</span>
		</button>
	</div>
	
	<div class="glass-card tool-results">
		<div class="result-header">
			<h3>Generated Passwords</h3>
			<button id="copy-btn" class="btn btn-success" disabled>
				<span>Copy All</span>
			</button>
		</div>
		<textarea 
			id="password-output" 
			class="password-textarea" 
			readonly 
			placeholder="Click 'Generate Passwords' to create secure passwords..."
		></textarea>
	</div>
</div>

<script>
	const lengthInput = document.getElementById('length') as HTMLInputElement;
	const countInput = document.getElementById('count') as HTMLInputElement;
	const uppercaseCheck = document.getElementById('uppercase') as HTMLInputElement;
	const lowercaseCheck = document.getElementById('lowercase') as HTMLInputElement;
	const numbersCheck = document.getElementById('numbers') as HTMLInputElement;
	const symbolsCheck = document.getElementById('symbols') as HTMLInputElement;
	const generateBtn = document.getElementById('generate-btn') as HTMLButtonElement;
	const copyBtn = document.getElementById('copy-btn') as HTMLButtonElement;
	const passwordOutput = document.getElementById('password-output') as HTMLTextAreaElement;

	const UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	const LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';
	const NUMBERS = '0123456789';
	const SYMBOLS = '!@#$%^&*()_+-=[]{}|;:,.<>?';

	function generatePassword(charset: string, length: number): string {
		
		const array = new Uint32Array(length);
		crypto.getRandomValues(array);
		
		let password = '';
		for (let i = 0; i < length; i++) {
			password += charset[array[i] % charset.length];
		}
		
		return password;
	}

	function generatePasswords(): void {
		const length = parseInt(lengthInput.value);
		const count = parseInt(countInput.value);
		
		if (length < 8 || length > 128) {
			alert('Password length must be between 8 and 128 characters');
			return;
		}
		
		if (count < 1 || count > 20) {
			alert('Password count must be between 1 and 20');
			return;
		}
		
		let charset = '';
		
		if (uppercaseCheck.checked) charset += UPPERCASE;
		if (lowercaseCheck.checked) charset += LOWERCASE;
		if (numbersCheck.checked) charset += NUMBERS;
		if (symbolsCheck.checked) charset += SYMBOLS;
		
		if (charset === '') {
			alert('Please select at least one character type');
			return;
		}
		
		const passwords: string[] = [];
		
		for (let i = 0; i < count; i++) {
			const password = generatePassword(charset, length);
			if (password) {
				passwords.push(password);
			}
		}
		
		if (passwords.length > 0) {
			passwordOutput.value = passwords.join('\n');
			copyBtn.disabled = false;
		}
	}

	function copyToClipboard(): void {
		if (passwordOutput.value) {
			navigator.clipboard.writeText(passwordOutput.value).then(() => {
				copyBtn.textContent = 'Copied!';
				setTimeout(() => {
					copyBtn.textContent = 'Copy All';
				}, 2000);
			}).catch(() => {
				alert('Failed to copy passwords');
			});
		}
	}

	generateBtn.addEventListener('click', generatePasswords);
	copyBtn.addEventListener('click', copyToClipboard);
	
	// Generate initial passwords
	generatePasswords();
</script>

<style>
	.control-row {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1.5rem;
		margin-bottom: 1.5rem;
	}

	.control-group input[type="number"] {
		width: 100px;
		max-width: 100%;
	}

	.character-options {
		margin-bottom: 2rem;
	}

	.character-options h3 {
		margin-bottom: 1rem;
		font-size: 1.1rem;
	}

	.checkbox-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 1rem;
	}

	.password-textarea {
		width: 100%;
		min-height: 300px;
		padding: 1rem;
		background: var(--bg-tertiary);
		border: 1px solid var(--border-primary);
		border-radius: var(--radius-md);
		font-family: var(--font-mono);
		font-size: 0.875rem;
		line-height: 1.6;
		color: var(--text-primary);
		resize: vertical;
		transition: all 0.2s ease;
	}

	.password-textarea:focus {
		outline: none;
		border-color: var(--accent-primary);
		box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
	}

	.password-textarea::placeholder {
		color: var(--text-muted);
		font-style: italic;
	}


	/* Button enhancements */
	.btn span {
		position: relative;
		z-index: 1;
	}

	/* Animation for password generation */
	@keyframes passwordGenerate {
		0% {
			transform: scale(1);
		}
		50% {
			transform: scale(1.05);
		}
		100% {
			transform: scale(1);
		}
	}

	.generating {
		animation: passwordGenerate 0.6s ease-out;
	}

	/* Success state for copy button */
	.btn-success.copied {
		background: var(--accent-success);
		transform: scale(1.05);
	}

	/* Loading state */
	.btn.loading {
		position: relative;
		color: transparent;
	}

	.btn.loading::after {
		content: '';
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		width: 16px;
		height: 16px;
		border: 2px solid rgba(255, 255, 255, 0.3);
		border-top: 2px solid white;
		border-radius: 50%;
		animation: spin 1s linear infinite;
	}

	@keyframes spin {
		0% { transform: translate(-50%, -50%) rotate(0deg); }
		100% { transform: translate(-50%, -50%) rotate(360deg); }
	}

	/* Enhanced hover effects */
	.glass-card:hover {
		transform: translateY(-2px);
	}

	.result-header {
		flex-wrap: wrap;
		gap: 1rem;
	}

</style>