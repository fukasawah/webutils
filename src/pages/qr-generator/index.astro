---
import Layout from '../../layouts/Layout.astro';
import QRCode from '../../components/QRCode.astro';

---

<Layout title="QR Code Generator">
  <main>
    <div class="tool-container">
      <header class="tool-header">
        <h1>üîó QR Code Generator</h1>
        <p class="tool-description">
          Generate QR codes from text, URLs, or any data. Customize size and error correction level for optimal scanning.
        </p>
      </header>

      <div class="tool-content">
        <section class="glass-card tool-controls">
          <div class="control-group">
            <label for="qrText">Text or URL to encode</label>
            <textarea 
              id="qrText" 
              class="input"
              placeholder="Enter text, URL, or any data to generate QR code..."
              rows="4"
            ></textarea>
          </div>

          <div class="control-row">
            <div class="control-group">
              <label for="qrSize">Size (pixels)</label>
              <input 
                type="number" 
                id="qrSize" 
                class="input"
                min="100" 
                max="2000" 
                step="10"
                value="300"
                placeholder="100-2000"
              />
            </div>

            <div class="control-group">
              <label for="errorLevel">Error Correction</label>
              <select id="errorLevel" class="input">
                <option value="L">Low (~7%)</option>
                <option value="M" selected>Medium (~15%)</option>
                <option value="Q">Quartile (~25%)</option>
                <option value="H">High (~30%)</option>
              </select>
            </div>
          </div>
          
          <div class="control-group">
            <label for="outputFormat">Output Format</label>
            <select id="outputFormat" class="input">
              <option value="canvas">Canvas</option>
              <option value="svg">SVG</option>
            </select>
          </div>

          <button id="generateBtn" class="btn btn-primary">
            üîÑ Regenerate QR Code
          </button>
          
          <!-- Simple feedback area -->
          <div class="generation-feedback">
            <div class="suggestion-area" id="suggestionArea" style="display: none;">
              <div class="suggestion-content">
                <span class="suggestion-icon">üí°</span>
                <span class="suggestion-text" id="suggestionText"></span>
                <button class="suggestion-btn" id="suggestionBtn">Apply</button>
              </div>
            </div>
            
            <div class="warning-area" id="sizeWarningArea" style="display: none;">
              <div class="warning-content">
                <span class="warning-icon">‚ö†Ô∏è</span>
                <span class="warning-text" id="sizeWarningText"></span>
                <button class="warning-btn" id="sizeOptimizeBtn">Fix Size</button>
              </div>
            </div>
          </div>
        </section>

        <section class="glass-card tool-results">
          <div class="result-header">
            <h3>Generated QR Code</h3>
          </div>
          
          <div class="qr-container">
            <QRCode id="mainQR" />
          </div>
          
          <div class="qr-actions">
            <button id="downloadPngBtn" class="btn btn-secondary" disabled>
              üì•<br />Download PNG
            </button>
            <button id="downloadSvgBtn" class="btn btn-secondary" disabled>
              üì•<br />Download SVG
            </button>
            <button id="copyBtn" class="btn btn-secondary" disabled>
              üìã<br />Copy Image
            </button>
            <button id="shareBtn" class="btn btn-secondary" disabled>
              üîó<br />Copy URL
            </button>
          </div>

          <div class="qr-info" id="qrInfo" style="display: none;">
            <div class="info-item">
              <span class="label">Content:</span>
              <span class="value" id="infoContent">-</span>
            </div>
            <div class="info-item">
              <span class="label">Size:</span>
              <span class="value" id="infoSize">-</span>
            </div>
            <div class="info-item">
              <span class="label">Error Correction:</span>
              <span class="value" id="infoError">-</span>
            </div>
            <div class="info-item">
              <span class="label">Data Usage:</span>
              <span class="value" id="infoUsage">-</span>
            </div>
          </div>
        </section>
      </div>

    </div>
  </main>
</Layout>

<script>
  const textInput = document.getElementById('qrText') as HTMLTextAreaElement;
  const sizeInput = document.getElementById('qrSize') as HTMLInputElement;
  const errorSelect = document.getElementById('errorLevel') as HTMLSelectElement;
  const outputFormat = document.getElementById('outputFormat') as HTMLSelectElement;
  const fileFormat = document.getElementById('fileFormat') as HTMLSelectElement;
  const generateBtn = document.getElementById('generateBtn') as HTMLButtonElement;
  const downloadBtn = document.getElementById('downloadBtn') as HTMLButtonElement;
  const copyBtn = document.getElementById('copyBtn') as HTMLButtonElement;
  const shareBtn = document.getElementById('shareBtn') as HTMLButtonElement;
  const qrInfo = document.getElementById('qrInfo') as HTMLDivElement;
  const infoContent = document.getElementById('infoContent') as HTMLSpanElement;
  const infoSize = document.getElementById('infoSize') as HTMLSpanElement;
  const infoError = document.getElementById('infoError') as HTMLSpanElement;
  const infoUsage = document.getElementById('infoUsage') as HTMLSpanElement;
  const suggestionArea = document.getElementById('suggestionArea') as HTMLDivElement;
  const suggestionText = document.getElementById('suggestionText') as HTMLSpanElement;
  const suggestionBtn = document.getElementById('suggestionBtn') as HTMLButtonElement;
  const sizeWarningArea = document.getElementById('sizeWarningArea') as HTMLDivElement;
  const sizeWarningText = document.getElementById('sizeWarningText') as HTMLSpanElement;
  const sizeOptimizeBtn = document.getElementById('sizeOptimizeBtn') as HTMLButtonElement;

  let currentText = '';
  
  // Common SVG to PNG conversion function
  function convertSVGToPNG(qrElement: HTMLElement, callback: (dataUrl: string) => void) {
    const svg = qrElement.querySelector('svg');
    if (svg) {
      const serializer = new XMLSerializer();
      const svgString = serializer.serializeToString(svg);
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        canvas.width = img.width;
        canvas.height = img.height;
        ctx?.drawImage(img, 0, 0);
        callback(canvas.toDataURL());
      };
      
      img.src = 'data:image/svg+xml;base64,' + btoa(svgString);
    }
  }

  // Download SVG directly
  function downloadSVG(qrElement: HTMLElement, filename: string) {
    const svg = qrElement.querySelector('svg');
    if (svg) {
      const serializer = new XMLSerializer();
      const svgString = serializer.serializeToString(svg);
      const blob = new Blob([svgString], { type: 'image/svg+xml' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.download = filename;
      link.href = url;
      link.click();
      
      URL.revokeObjectURL(url);
    }
  }
  
  // Get selected output format
  function getSelectedFormat(): string {
    return outputFormat.value || 'canvas';
  }
  
  // Simple QR Code capacity check
  const QR_CAPACITY = {
    'L': 2953, 'M': 2331, 'Q': 1663, 'H': 1273
  };
  
  // Simple data usage calculation
  function calculateDataUsage(text: string, errorLevel: string): { 
    current: number, 
    max: number, 
    percentage: number
  } {
    const utf8Bytes = new TextEncoder().encode(text).length;
    const maxCapacity = QR_CAPACITY[errorLevel as keyof typeof QR_CAPACITY] || QR_CAPACITY.M;
    const percentage = Math.round((utf8Bytes / maxCapacity) * 100);
    
    return {
      current: utf8Bytes,
      max: maxCapacity, 
      percentage: Math.min(percentage, 100)
    };
  }
  
  // Find alternative error correction levels
  function findAlternativeErrorLevels(text: string, currentLevel: string): Array<{level: string, usage: any}> {
    const levels = ['L', 'M', 'Q', 'H'];
    const alternatives = [];
    
    for (const level of levels) {
      if (level !== currentLevel) {
        const usage = calculateDataUsage(text, level);
        if (usage.percentage <= 100) {
          alternatives.push({ level, usage });
        }
      }
    }
    
    return alternatives.sort((a, b) => b.usage.max - a.usage.max);
  }
  
  // Simple suggestion for capacity issues
  function updateSuggestion(text: string, currentLevel: string) {
    const currentUsage = calculateDataUsage(text, currentLevel);
    
    if (currentUsage.percentage > 100) {
      const alternatives = findAlternativeErrorLevels(text, currentLevel);
      
      if (alternatives.length > 0) {
        const best = alternatives[0];
        const levelNames = { 'L': 'Low', 'M': 'Medium', 'Q': 'Quartile', 'H': 'High' };
        
        suggestionText.textContent = `Try "${levelNames[best.level as keyof typeof levelNames]}" error correction instead`;
        suggestionBtn.onclick = () => {
          errorSelect.value = best.level;
          updateDataUsageDisplay();
          setTimeout(() => generateBtn.click(), 100);
        };
        suggestionArea.style.display = 'block';
      } else {
        suggestionArea.style.display = 'none';
      }
    } else {
      suggestionArea.style.display = 'none';
    }
  }
  
  // Simple size warning (only for very small sizes)
  function updateSizeWarning(text: string, currentSize: number) {
    if (!text || currentSize >= 200) {
      sizeWarningArea.style.display = 'none';
      return;
    }
    
    const recommendedSize = 300;
    sizeWarningText.textContent = `Size too small for reliable scanning. ${recommendedSize}px recommended.`;
    
    sizeOptimizeBtn.onclick = () => {
      sizeInput.value = recommendedSize.toString();
      updateDataUsageDisplay();
      setTimeout(() => generateBtn.click(), 100);
    };
    
    sizeWarningArea.style.display = 'block';
  }

  // Real-time data usage update
  function updateDataUsageDisplay() {
    const text = textInput.value.trim();
    const errorLevel = errorSelect.value;
    
    if (text) {
      const usage = calculateDataUsage(text, errorLevel);
      const usageColor = usage.percentage > 90 ? '#ff4444' : usage.percentage > 75 ? '#ff8800' : '#888';
      
      // Update a small indicator near the textarea
      let indicator = document.getElementById('dataUsageIndicator');
      if (!indicator) {
        indicator = document.createElement('div');
        indicator.id = 'dataUsageIndicator';
        indicator.style.cssText = 'font-size: 0.8rem; margin-top: 0.25rem; color: #666;';
        textInput.parentNode?.appendChild(indicator);
      }
      
      indicator.textContent = `${usage.current}/${usage.max} bytes (${usage.percentage}%)`;
      indicator.style.color = usageColor;
      
      if (usage.percentage > 100) {
        indicator.textContent += ' - Exceeds capacity!';
      }
    }
    
    // Update suggestions
    if (text) {
      updateSuggestion(text, errorLevel);
      
      // Update size warning
      const currentSize = parseInt(sizeInput.value) || 300;
      updateSizeWarning(text, currentSize);
    } else {
      suggestionArea.style.display = 'none';
      sizeWarningArea.style.display = 'none';
    }
  }
  
  // Debounce function for performance
  function debounce(func: Function, wait: number) {
    let timeout: NodeJS.Timeout;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Add event listeners with debouncing for data usage display
  textInput.addEventListener('input', debounce(updateDataUsageDisplay, 300));
  errorSelect.addEventListener('change', updateDataUsageDisplay);
  sizeInput.addEventListener('input', debounce(updateDataUsageDisplay, 300));
  
  // Add event listeners for auto-generation
  textInput.addEventListener('input', debounce(() => generateQRCode(), 500));
  errorSelect.addEventListener('change', () => generateQRCode());
  sizeInput.addEventListener('input', debounce(() => generateQRCode(), 300));
  outputFormat.addEventListener('change', () => generateQRCode());
  
  // Common QR Code generation function
  function generateQRCode(text: string = textInput.value.trim()) {
    if (!text) {
      // Show placeholder when no text
      const qrElement = document.getElementById('mainQR') as HTMLElement;
      if (qrElement && window.QRCode) {
        qrElement.innerHTML = `
          <div style="width: 300px; height: 300px; background: #f5f5f5; display: flex; align-items: center; justify-content: center; color: #999; font-size: 14px; border-radius: 8px;">
            Enter text to generate QR code
          </div>
        `;
      }
      // Disable actions
      downloadPngBtn.disabled = true;
      downloadSvgBtn.disabled = true;
      copyBtn.disabled = true;
      shareBtn.disabled = true;
      qrInfo.style.display = 'none';
      return;
    }

    const size = Math.max(100, Math.min(2000, parseInt(sizeInput.value) || 300));
    const errorLevel = errorSelect.value;
    
    // Update QR code properties
    const qrElement = document.getElementById('mainQR') as HTMLElement;
    if (qrElement) {
      qrElement.dataset.qrSize = size.toString();
      qrElement.dataset.qrErrorLevel = errorLevel;
      qrElement.dataset.qrFormat = getSelectedFormat();
    }

    // Generate QR code
    if (window.QRCode) {
      try {
        window.QRCode.byId('mainQR').update(text);
        currentText = text;
        
        // Update info and enable actions
        updateQRInfo(text, size, errorLevel);
        downloadPngBtn.disabled = false;
        downloadSvgBtn.disabled = false;
        copyBtn.disabled = false;
        shareBtn.disabled = false;
        qrInfo.style.display = 'block';
      } catch (error) {
        console.error('QR Code generation failed:', error);
        // Show error state
        if (qrElement) {
          qrElement.innerHTML = `
            <div style="width: 300px; height: 300px; background: #fee; display: flex; align-items: center; justify-content: center; color: #c00; font-size: 14px; border-radius: 8px;">
              QR generation failed
            </div>
          `;
        }
      }
    }
  }

  // Manual generation button (for explicit user action)
  generateBtn.addEventListener('click', () => {
    const text = textInput.value.trim();
    if (!text) {
      alert('Please enter some text or URL to generate QR code');
      return;
    }

    const errorLevel = errorSelect.value;
    
    // Check capacity before generating
    const usage = calculateDataUsage(text, errorLevel);
    if (usage.percentage > 100) {
      const alternatives = findAlternativeErrorLevels(text, errorLevel);
      let message = `Warning: The text exceeds QR code capacity (${usage.current}/${usage.max} bytes).\n`;
      
      if (alternatives.length > 0) {
        const best = alternatives[0];
        const levelNames = { 'L': 'Low', 'M': 'Medium', 'Q': 'Quartile', 'H': 'High' };
        message += `Suggestion: Error correction \"${levelNames[best.level as keyof typeof levelNames]}\" would fit (${best.usage.current}/${best.usage.max} bytes).\n\n`;
      } else {
        message += `Consider using shorter text.\n\n`;
      }
      
      message += `Generate anyway? (May fail or create an oversized QR code)`;
      
      const shouldContinue = confirm(message);
      if (!shouldContinue) {
        return;
      }
    }
    
    generateQRCode(text);
  });

  // Download QR Code as PNG
  downloadPngBtn.addEventListener('click', () => {
    const qrElement = document.getElementById('mainQR') as HTMLElement;
    if (qrElement && currentText) {
      const qrFormat = qrElement.dataset.qrFormat || 'canvas';
      const timestamp = Date.now();
      
      if (qrFormat === 'canvas') {
        const canvas = qrElement.querySelector('canvas') as HTMLCanvasElement;
        if (canvas) {
          const link = document.createElement('a');
          link.download = `qrcode-${timestamp}.png`;
          link.href = canvas.toDataURL();
          link.click();
        }
      } else {
        // For SVG QR, convert to PNG for download
        convertSVGToPNG(qrElement, (dataUrl) => {
          const link = document.createElement('a');
          link.download = `qrcode-${timestamp}.png`;
          link.href = dataUrl;
          link.click();
        });
      }
    }
  });

  // Download QR Code as SVG
  downloadSvgBtn.addEventListener('click', () => {
    const qrElement = document.getElementById('mainQR') as HTMLElement;
    if (qrElement && currentText) {
      const timestamp = Date.now();
      downloadSVG(qrElement, `qrcode-${timestamp}.svg`);
    }
  });

  // Copy QR Code to Clipboard
  copyBtn.addEventListener('click', async () => {
    const qrElement = document.getElementById('mainQR') as HTMLElement;
    if (qrElement && currentText) {
      try {
        const qrFormat = qrElement.dataset.qrFormat || 'canvas';
        
        // Copy as PNG (always)
        if (qrFormat === 'canvas') {
          const canvas = qrElement.querySelector('canvas') as HTMLCanvasElement;
          if (canvas) {
            canvas.toBlob(async (blob) => {
              if (blob) {
                await navigator.clipboard.write([
                  new ClipboardItem({ 'image/png': blob })
                ]);
                // Visual feedback
                const originalText = copyBtn.textContent;
                copyBtn.textContent = '‚úÖ Copied!';
                setTimeout(() => {
                  copyBtn.textContent = originalText;
                }, 2000);
              }
            });
          }
        } else {
          // For SVG QR, convert to PNG for clipboard
          convertSVGToPNG(qrElement, (dataUrl) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();
            
            img.onload = () => {
              canvas.width = img.width;
              canvas.height = img.height;
              ctx?.drawImage(img, 0, 0);
              
              canvas.toBlob(async (blob) => {
                if (blob) {
                  await navigator.clipboard.write([
                    new ClipboardItem({ 'image/png': blob })
                  ]);
                  // Visual feedback
                  const originalText = copyBtn.textContent;
                  copyBtn.textContent = '‚úÖ Copied!';
                  setTimeout(() => {
                    copyBtn.textContent = originalText;
                  }, 2000);
                }
              });
            };
            
            img.src = dataUrl;
          });
        }
      } catch (error) {
        console.error('Failed to copy to clipboard:', error);
        alert('Failed to copy to clipboard. You can use the download button instead.');
      }
    }
  });

  // Share Link
  shareBtn.addEventListener('click', () => {
    if (currentText) {
      try {
        const currentSize = parseInt(sizeInput.value) || 300;
        const currentErrorLevel = errorSelect.value;
        
        const params = new URLSearchParams();
        params.set('text', currentText);
        params.set('size', currentSize.toString());
        params.set('errorLevel', currentErrorLevel);
        
        const shareUrl = `${window.location.origin}${window.location.pathname}?${params.toString()}`;
        
        // Copy settings URL to clipboard
        navigator.clipboard.writeText(shareUrl).then(() => {
          // Visual feedback
          const originalText = shareBtn.textContent;
          shareBtn.textContent = '‚úÖ URL Copied!';
          setTimeout(() => {
            shareBtn.textContent = originalText;
          }, 2000);
        }).catch(() => {
          // Fallback: show the URL in a prompt
          prompt('Copy this settings URL:', shareUrl);
        });
      } catch (error) {
        console.error('Failed to generate share link:', error);
        alert('Failed to generate share link.');
      }
    }
  });

  // Update QR Info
  function updateQRInfo(text: string, size: number, errorLevel: string) {
    infoContent.textContent = text.length > 30 ? text.substring(0, 30) + '...' : text;
    infoContent.title = text; // Show full text on hover
    infoSize.textContent = `${size}x${size}px`;
    
    const errorLabels: Record<string, string> = {
      'L': 'Low (~7%)',
      'M': 'Medium (~15%)',
      'Q': 'Quartile (~25%)',
      'H': 'High (~30%)'
    };
    infoError.textContent = errorLabels[errorLevel] || errorLevel;
    
    // Calculate and display data usage
    const usage = calculateDataUsage(text, errorLevel);
    const usageColor = usage.percentage > 90 ? '#ff4444' : usage.percentage > 75 ? '#ff8800' : '#00aa00';
    infoUsage.textContent = `${usage.current}/${usage.max} bytes (${usage.percentage}%)`;
    infoUsage.style.color = usageColor;
    
  }

  // Initialize from URL parameters
  const urlParams = new URLSearchParams(window.location.search);
  const urlText = urlParams.get('text');
  const urlSize = urlParams.get('size');
  const urlErrorLevel = urlParams.get('errorLevel') || urlParams.get('error');
  
  // Set initial values from URL parameters
  if (urlText) textInput.value = urlText;
  if (urlSize) {
    const size = parseInt(urlSize);
    if (size >= 100 && size <= 2000) sizeInput.value = size.toString();
  }
  if (urlErrorLevel && ['L', 'M', 'Q', 'H'].includes(urlErrorLevel.toUpperCase())) {
    errorSelect.value = urlErrorLevel.toUpperCase();
  }
  
  // Auto-generate if text is provided
  if (urlText && urlText.trim()) {
    setTimeout(() => {
      updateDataUsageDisplay();
      generateQRCode();
    }, 100);
  } else {
    // Show initial placeholder
    setTimeout(() => {
      updateDataUsageDisplay();
      generateQRCode();
    }, 100);
  }
</script>

<style>
  /* Tool-specific styles only */

  .tool-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    margin-bottom: 3rem;
  }

  /* Using global control-group styles - update HTML classes */

  /* Using global control-row for grid layout */

  /* Using global button styles */

  /* Using global glass-card tool-results */

  .qr-container {
    margin-bottom: 2rem;
    display: flex;
    justify-content: center;
  }

  .qr-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 2rem;
  }

  .qr-info {
    background: var(--bg-primary);
    border: 1px solid var(--border-secondary);
    border-radius: var(--radius-md);
    padding: 1.5rem;
    text-align: left;
  }


  .info-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid var(--border-secondary);
  }

  .info-item:last-child {
    border-bottom: none;
  }

  .info-item .label {
    font-weight: 500;
    color: var(--text-muted);
  }

  .info-item .value {
    color: var(--text-primary);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    word-break: break-all;
    overflow-wrap: break-word;
    max-width: 200px;
  }

  .suggestion-area {
    margin-top: 1rem;
    padding: 1rem;
    background: linear-gradient(135deg, #fff7e6, #fff3cd);
    border: 1px solid #ffc107;
    border-radius: var(--radius-md);
    animation: slideIn 0.3s ease-out;
  }

  .suggestion-content {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .suggestion-icon {
    font-size: 1.2rem;
  }

  .suggestion-text {
    flex: 1;
    font-size: 0.9rem;
    color: #664d03;
  }

  .suggestion-btn {
    padding: 0.5rem 1rem;
    background: #ffc107;
    color: #664d03;
    border: none;
    border-radius: var(--radius-sm);
    font-size: 0.85rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .suggestion-btn:hover {
    background: #ffca2c;
    transform: translateY(-1px);
  }

  .warning-area {
    margin-top: 1rem;
    padding: 1rem;
    background: linear-gradient(135deg, #fff2e6, #ffe6cc);
    border: 1px solid #ff8c00;
    border-radius: var(--radius-md);
    animation: slideIn 0.3s ease-out;
  }

  .warning-content {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .warning-icon {
    font-size: 1.2rem;
  }

  .warning-text {
    flex: 1;
    font-size: 0.9rem;
    color: #cc4400;
  }

  .warning-btn {
    padding: 0.5rem 1rem;
    background: #ff8c00;
    color: white;
    border: none;
    border-radius: var(--radius-sm);
    font-size: 0.85rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .warning-btn:hover {
    background: #ff7700;
    transform: translateY(-1px);
  }

  .generation-feedback {
    margin-top: 1rem;
  }


  @media (max-width: 768px) {
    .tool-content {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .options-grid {
      grid-template-columns: 1fr;
    }

    .qr-actions {
      flex-direction: column;
    }
  }
</style>